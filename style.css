/* nejsme vcerejsi, pouzivame moderni box model */
html {
  box-sizing: border-box;
}
*,
:after,
:before {
  box-sizing: inherit;
}

body {
  margin: 0;
  padding: 30px;
  font-family: "Alice", serif;
  font-size: 18px;
  line-height: 1.5;
}

h1,
h2,
h3 {
  font-family: "Kaushan Script", cursive;
  font-weight: normal;
  margin: 0;
}

.blockquote {
  font-family: "Kaushan Script", cursive;
}

/* --------------------------------------------------- */

/* barvy */
:root {
  --svetla: #edf3f5;
  --seda: #b2bec3;
  --tmava: #636e72;
  --oranzova: #ee5a24;
  --cervena: #ea2027;
  --zluta: #f79f1f;
  --zelena: #a3cb38;
  --limetka: #c4e538;
}

/*
	Všimni si, jak jsou zde nadefinované barvy.
	Potřebný kód barvy si odtamtud můžeš vyzobnout a použít
	ve svém kódu, ale existuje i lepší způsob.

  CSS custom properties, někdy také označované jako CSS
	variables (CSS proměnné), je způsob, jak si	pojmenovat
	nějakou hodnotu a potom ji v kódu opakovaně používat.
	Často se používá právě pro barvy a další "nastavení".

	Když si chci nějakou hodnotu nadefinovat, použiji zápis
	--mujnazev: hodnota
	Když chci, abych mohl hodnotu používat všude v CSS,
	založím ji uvnitř selektoru :root, takže např.:
	:root {
		--mojebarva: #ff8800;
	}

	Chci-li potom dál v CSS hodnotu použít, stačí použít funkci var a v závorce název proměnné.Např.:
	.odstavec {
		color: var(--mojebarva);
	}

	Nemusím si tak pamatovat kódy barev nebo neustále v CSS jezdit nahoru a dolů, abych si je odněkud zkopíroval.

	Více o CSS custom properties:
	- https://www.w3schools.com/css/css3_variables.asp
	- https://css-tricks.com/patterns-for-practical-css-custom-properties-use/
	- https://www.smashingmagazine.com/2017/04/start-using-css-custom-properties/

	čárka - 
	.hlavni::after{
    content: "";
    display: block;
    width: 200px;
    height: 3px;
    background-image: linear-gradient(to right, magenta, pink);
    margin-top: 10px;
    margin-left: -50px;

*/

.blog {
  display: grid;
  grid-template-columns: 1fr 4fr 2fr;
  width: 100%;
  gap: 40px;
}

.header {
  grid-column: 2/3;
}

h1 {
  color: var(--zelena);
  font-size: 65px;
  width: 50%;
}

h2 {
  grid-column: 2/3;
  color: #c4e538;
  font-size: 50px;
}

.meta {
  color: #edf3f5;
}

.text {
  grid-column: 2/3;
}

.figure {
  grid-column: 1/4;
  width: 100%;
  padding: 0;
  margin: 0;
}

.figcaption {
  color: #edf3f5;
  grid-column: 1/3;
  margin: 0;
  padding: 0;
}

.tip text {
  background-color: #edf3f5;
  color: #b2bec3;
}

.tip a {
  color: #ea2027;
}

.tip {
  grid-column: 1/2;
  width: 160px;
  font-size: 16px;
  color: #636e72;
  background-color: #edf3f5;
  padding: 20px;
  margin-bottom: 20px;
}

.tip-vlevo {
  text-align: right;
  border-right: solid 2px #ee5a24;
}

.tip-vpravo {
  grid-column: 3/4;
  width: 350px;
  border-left: solid 2px #ee5a24;
  margin-right: 0;
  margin-left: 150px;
  padding: 30px;
}

.palacinky {
  width: 120px;
}

.blockquote {
  grid-column: 2/4;
  color: #b2bec3;
  font-size: 40px;
  padding-left: 60px;
  margin: 0;
  align-self: center;
}

.blockquote::before,
.blockquote::after {
  content: "";
  display: block;
  width: 120px;
  height: 2px;
  background-color: #c4e538;
  margin: 30px 255px;
}

.dlouha::before,
.dlouha::after {
  content: "";
  display: block;
  width: 120px;
  height: 2px;
  background-color: #c4e538;
  margin: 30px 400px;
}

.dlouha {
  grid-column: 1/4;
}

.footer,
.footer a {
  grid-column: 4/-4;
  color: #edf3f5;
}
